Project: Stern CPU/Computer Simulation

Current Task: Integrate the VirtualDisk device into the Stern-XT Operating System.

Architectural Plan:

The integration will follow a three-layer design to ensure clear separation of concerns and to avoid nested syscalls.

1.  **Layer 1: Driver Subroutine Library (in `os_loader.asm` or a new `loader_disk_routines.asm`)**
    *   **Purpose**: A callable library of low-level functions that directly interface with the virtual disk hardware. This is the core driver, usable by any kernel-mode code.
    *   **Subroutines**:
        *   `VDISK_init`: Initializes the disk.
        *   `VDISK_open`: Opens a file and returns a handle.
        *   `VDISK_close`: Closes a file handle.
        *   `VDISK_read_block`: Reads a single block from an open file.
        *   `VDISK_write_block`: Writes a single block to an open file.
        *   `VDISK_create`: Creates a new file.
    *   **Note**: The filename hashing algorithm must be simplified to produce a 16-bit hash to be feasible for the Stern-XT's 16-bit architecture. The `VirtualDisk.py` simulation must be updated to match this.

2.  **Layer 2: Kernel Syscall Handlers (in `os_kernel.asm`)**
    *   **Purpose**: Provides the protected interface between user-mode programs and the kernel. These handlers call the Layer 1 subroutines.
    *   **Core I/O Syscalls (Thin Wrappers)**: These provide flexible, low-level file access.
        *   `SYSCALL_F_OPEN`: Wraps the `VDISK_open` subroutine.
        *   `SYSCALL_F_CLOSE`: Wraps the `VDISK_close` subroutine.
        *   `SYSCALL_F_READ`: Wraps the `VDISK_read_block` subroutine.
        *   `SYSCALL_F_WRITE`: Wraps the `VDISK_write_block` subroutine.
        *   `SYSCALL_F_CREATE`: Wraps the `VDISK_create` subroutine.
        
    *   **High-Level Convenience Syscalls (Composite Functions)**: These provide simple, whole-file access.
        *   `SYSCALL_LOAD_FILE`: Implements a complete file load by calling the `VDISK_open`, `VDISK_read_block` (in a loop), and `VDISK_close` subroutines.
        *   `SYSCALL_STORE_FILE`: Implements a complete file save by calling `VDISK_create`, `VDISK_write_block` (in a loop), and `VDISK_close` subroutines.