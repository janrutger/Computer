{
    "scopeName": "source.stacks",
    "patterns": [
        { "include": "#comments" },
        { "include": "#strings" },
        { "include": "#numbers" },
        { "include": "#keywords" },
        { "include": "#operators" },
        { "include": "#punctuation" },
        { "include": "#functions" },
        { "include": "#blocks" },
        { "include": "#identifier" }
    ],
    "repository": {
        "comments": {
            "patterns": [
                { "name": "comment.line.number-sign.stacks", "match": "#.*" },
                { "name": "comment.line.semicolon.stacks", "match": ";.*" }
            ]
        },
        "strings": {
            "name": "string.quoted.double.stacks",
            "begin": "\"",
            "end": "\"",
            "patterns": [
                { "name": "constant.character.escape.stacks", "match": "\\."
                }
            ]
        },
        "numbers": {
            "name": "constant.numeric.integer.stacks",
            "match": "\\b[0-9]+\\b"
        },
        "keywords": {
            "patterns": [
                { "name": "keyword.control.stacks", "match": "\\b(DEF|IF|ELSE|END|WHILE|DO|DONE|GOTO|USE|ASM)\\b" },
                { "name": "keyword.other.stacks", "match": "\\b(DUP|SWAP|DROP|OVER|RND|IO|PRINT|AS)\\b" },
                { "name": "keyword.declaration.stacks", "match": "\\b(VAR|LIST|STRING|VALUE|CONST)\\b" }
            ]
        },
        "operators": {
            "patterns": [
                { "name": "keyword.operator.comparison.stacks", "match": "==|!=|<|>" },
                { "name": "keyword.operator.arithmetic.stacks", "match": "//|\\+|-|%|\\*(?![a-zA-Z_])" }
            ]
        },
        "punctuation": {
            "patterns": [
                { "name": "punctuation.definition.variable.stacks", "match": "&" },
                { "name": "punctuation.definition.label.stacks", "match": ":" },
                { "name": "punctuation.section.block.stacks", "match": "[{} ]" },
                { "name": "punctuation.definition.dereference.stacks", "match": "\\*(?=[a-zA-Z_])" }
            ]
        },
        "functions": {
            "patterns": [
                { "name": "entity.name.function.stacks", "match": "(?<=DEF\\s+)[a-zA-Z_][a-zA-Z0-9_]*" }
            ]
        },
        "identifier": {
            "name": "variable.other.stacks",
            "match": "\\b[a-zA-Z_][a-zA-Z0-9_]*\\b"
        }
    }
}