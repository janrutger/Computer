# Standard String Manipulation Library for the Stacks Language

# Temporary variables for the STRCMP function.
# Using VALUE for temporary storage is a pattern in this project.
VALUE _strcmp_p1 0
VALUE _strcmp_p2 0
VALUE _strcmp_c1 0
VALUE _strcmp_c2 0

# --- STRCMP ---
# Compares two null-terminated strings for equality.
#
# Usage:
#   &string1 &string2 STRcmp
#
# Returns:
#   1 on the stack if the strings are equal.
#   0 on the stack if the strings are not equal.
DEF STRcmp {
    # Pop pointers from stack into our temporary variables
    AS _strcmp_p2
    AS _strcmp_p1

    :strcmp_loop
        # Dereference pointers to get the characters
        *_strcmp_p1 AS _strcmp_c1
        *_strcmp_p2 AS _strcmp_c2

        # Compare the characters
        _strcmp_c1 _strcmp_c2 != IF
            0  # Not equal, push 0 and finish
            GOTO strcmp_end
        END

        # Characters were equal. Check if it was the null terminator.
        _strcmp_c1 0 == IF
            1  # It was null, so strings are equal. Push 1 and finish.
            GOTO strcmp_end
        END

        # Chars were equal, but not null. Increment pointers and loop.
        _strcmp_p1 1 + AS _strcmp_p1
        _strcmp_p2 1 + AS _strcmp_p2
        GOTO strcmp_loop

    :strcmp_end
        # The result (0 or 1) is now on top of the stack.
}

# --- ATOI (ASCII to Integer) ---
# Converts a string of digits to an integer.

# Private variables for ATOI
VALUE _atoi_s_ptr 0   # To hold the original input string pointer
VALUE _atoi_p 0       # The current pointer for the loop
VALUE _atoi_c 0       # The current character
VALUE _atoi_result 0  # The accumulated result

# Constants for character checking
CONST _ASCII_0 48
CONST _ASCII_9 57

# Converts a string to an integer.
#
# Usage:
#   &"123" ATOI
#
# On Success:
#   Returns: [number, 1] (e.g., [123, 1])
# On Failure (if string contains non-digits):
#   Returns: [original_pointer, 0]
DEF STRatoi {
    # Pop the input string pointer and save it
    AS _atoi_s_ptr
    
    # Initialize state
    0 AS _atoi_result
    _atoi_s_ptr AS _atoi_p

    :atoi_loop
        # Get the current character
        *_atoi_p AS _atoi_c

        # Check for end of string (success condition)
        _atoi_c 0 == IF
            _atoi_result # Push the final number
            1            # Push the success flag
            GOTO atoi_end
        END

        # Check if the character is a valid digit
        _atoi_c _ASCII_0 < IF GOTO atoi_fail END
        _atoi_c _ASCII_9 > IF GOTO atoi_fail END

        # It's a digit. Process it.
        # digit_value = char - '0'
        _atoi_c _ASCII_0 - 
        
        # result = (result * 10) + digit_value
        _atoi_result 10 * + AS _atoi_result

        # Increment pointer and continue
        _atoi_p 1 + AS _atoi_p
        GOTO atoi_loop

    :atoi_fail
        # A non-digit character was found. Return original pointer and failure flag.
        _atoi_s_ptr
        0
        GOTO atoi_end

    :atoi_end
        # Result is on the Data Stack
}


; --- STRLEN ---
; Calculates the length of a null-terminated string.
; ( &str -- len )
VALUE _strlen_p 0
VALUE _strlen_len 0
DEF STRlen {
    AS _strlen_p
    0 AS _strlen_len
    :strlen_loop
        *_strlen_p 0 == IF
            GOTO strlen_end
        END
        _strlen_p 1+ AS _strlen_p
        _strlen_len 1+ AS _strlen_len
        GOTO strlen_loop
    :strlen_end
        _strlen_len
}

; --- STRFIND ---
; Finds the first occurrence of a character in a string.
; ( &str char -- index success_flag )
VALUE _strfind_p 0
VALUE _strfind_char 0
VALUE _strfind_idx 0
DEF STRfind {
    AS _strfind_char
    AS _strfind_p
    0 AS _strfind_idx
    :strfind_loop
        *_strfind_p DUP 0 == IF
            DROP
            0 0 ; Not found
            GOTO strfind_end
        END
        _strfind_char == IF
            _strfind_idx 1 ; Found
            GOTO strfind_end
        END
        _strfind_p 1+ AS _strfind_p
        _strfind_idx 1+ AS _strfind_idx
        GOTO strfind_loop
    :strfind_end
}