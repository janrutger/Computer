## L-System with Manual Stack for Recursion (v4)
# This version uses a purely stack-based approach inside the recursive
# function to avoid issues with global variables.

INCLUDE turtle_lib
USE std_stern_io

# -----------------------------------------------------------------------------
# Manual Stack Implementation for Recursion
# -----------------------------------------------------------------------------

CONST MAX_DEPTH 16
LIST level_stack 16             # Memory for our manual stack
&level_stack AS stack_ptr       # Pointer for our manual stack

# Pushes a value from the main program stack onto our manual stack.
# Usage: <value> stack_push
DEF stack_push {
    AS *stack_ptr              # Store value from stack to address in stack_ptr
    stack_ptr 1 + AS stack_ptr # Increment pointer
}

# Pops a value from our manual stack and puts it on the main program stack.
# Usage: stack_pop (leaves <value> on the stack)
DEF stack_pop {
    stack_ptr 1 - AS stack_ptr # Decrement pointer
    *stack_ptr                 # Load value from new address, leave on main stack
}

# -----------------------------------------------------------------------------
# Recursive L-System Drawing Function (Purely Stack-Based)
# -----------------------------------------------------------------------------
DEF draw_koch {
    # The current level is expected to be on top of the stack.
    # Pop the level from the manual stack.
    stack_pop

    # Check if level is 0 (the base case).
    DUP 0 == IF 
        DROP # Get rid of the level value (0)
        4 TURTLE_forward # Increased distance for high-res screen
        GOTO draw_koch_end # Finished
    END

    # --- Recursive Step ---
    # The level (n) is on the stack. Decrement it to get (n-1).
    1 - 

    # Now (n-1) is on the stack. We need it for all 5 recursive calls.
    
    # Call 1
    DUP stack_push # Duplicate (n-1) and push it to the manual stack
    draw_koch IO 2 FLIP

    90 TURTLE_right

    # Call 2
    DUP stack_push
    draw_koch IO 2 FLIP

    270 TURTLE_right

    # Call 3
    DUP stack_push
    draw_koch IO 2 FLIP

    270 TURTLE_right

    # Call 4
    DUP stack_push
    draw_koch IO 2 FLIP

    90 TURTLE_right

    # Call 5 (no DUP needed as we consume the last copy)
    stack_push
    draw_koch

:draw_koch_end
}

# -----------------------------------------------------------------------------
# Main Program
# -----------------------------------------------------------------------------

# 1. Initialize turtle
TURTLE_start
#DBmode IO 2 MODE

db_pixel TURTLE_mode

# 2. Prepare for drawing

red TURTLE_color
10 10 TURTLE_goto       # Adjusted starting position for better visibility

# 3. Push the starting level onto our manual stack and start the recursion
3 stack_push draw_koch

# 4. Finalize drawing
IO 2 FLIP