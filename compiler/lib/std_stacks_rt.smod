# .HEADER
. $random_seed 1
# .FUNCTIONS
@rt_eq

        ustack A $DATASTACK_PTR
        ustack B $DATASTACK_PTR
        tste A B
        jmpt :eq_true
        ldi A 0
        jmp :eq_end
    :eq_true
        ldi A 1
    :eq_end
        stack A $DATASTACK_PTR
        ret
@rt_neq

        ustack A $DATASTACK_PTR
        ustack B $DATASTACK_PTR
        tste A B
        jmpf :neq_true
        ldi A 0
        jmp :neq_end
    :neq_true
        ldi A 1
    :neq_end
        stack A $DATASTACK_PTR
        ret
@rt_gt

        ustack A $DATASTACK_PTR
        ustack B $DATASTACK_PTR
        tstg B A
        jmpt :gt_true
        ldi A 0
        jmp :gt_end
    :gt_true
        ldi A 1
    :gt_end
        stack A $DATASTACK_PTR
        ret
@rt_lt

        ustack A $DATASTACK_PTR
        ustack B $DATASTACK_PTR
        tstg A B
        jmpt :lt_true
        ldi A 0
        jmp :lt_end
    :lt_true
        ldi A 1
    :lt_end
        stack A $DATASTACK_PTR
        ret
@rt_dup

        ustack A $DATASTACK_PTR
        stack A $DATASTACK_PTR
        stack A $DATASTACK_PTR
        ret
@rt_swap

        ustack A $DATASTACK_PTR
        ustack B $DATASTACK_PTR
        stack A $DATASTACK_PTR
        stack B $DATASTACK_PTR
        ret
@rt_drop

        ustack A $DATASTACK_PTR
        ret
@rt_over

        ustack A $DATASTACK_PTR
        ustack B $DATASTACK_PTR
        stack B $DATASTACK_PTR
        stack A $DATASTACK_PTR
        stack B $DATASTACK_PTR
        ret
@rt_print_tos

        ustack A $DATASTACK_PTR
        ld C A

        ldi I ~SYS_PRINT_NUMBER
        int $INT_VECTORS

        ldi C \Return
        ldi I ~SYS_PRINT_CHAR
        int $INT_VECTORS
        ret
@rt_udc_control

        ustack B $DATASTACK_PTR     ; Pop command code into B
        ustack A $DATASTACK_PTR     
        ld M A          ; Save the Channel number
        ustack A $DATASTACK_PTR
        ld C A          ; load data/arugumnet in C
        ld A M          ; load channel number in A

        ldi I ~SYS_UDC_CONTROL      ; Load the syscall number
        int $INT_VECTORS            ; call the kernel

        ; Check status and push return value for GET commands
        ldm A $SYSCALL_RETURN_STATUS
        tste A Z
        jmpf :rt_udc_ok
        ; Error handeling here, for now, just continue

    :rt_udc_ok  
        ; if command was GET, push the return value
        tst B ~UDC_DEVICE_GET
        jmpf :rt_udc_end        ; goto end if no return value

        ldm A $SYSCALL_RETURN_VALUE
        stack A $DATASTACK_PTR            ; Push the return value on the datastack

    :rt_udc_end 
        ret
@rt_rnd
    ldm A $random_seed
    stack A $DATASTACK_PTR
    ldi A 134775813
    ustack B $DATASTACK_PTR
    mul B A
    stack B $DATASTACK_PTR
    ldi A 1
    ustack B $DATASTACK_PTR
    add B A
    stack B $DATASTACK_PTR
    ldi A 65536
    ustack B $DATASTACK_PTR
    dmod B A
    sto A $random_seed
    stack A $DATASTACK_PTR
    ldi A 1000
    ustack B $DATASTACK_PTR
    dmod B A
    stack A $DATASTACK_PTR
    ret

# .DATA
% $random_seed 54321
