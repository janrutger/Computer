# .HEADER
. $p_syscall_status 1
. $p_syscall_value 1
. $input_buffer 80
. $p_input_buffer 1
. $input_buffer_index 1
# .FUNCTIONS
@io_lib_init
    call @pop_A
    sto A $p_syscall_value
    call @pop_A
    sto A $p_syscall_status
    ret
@PRTchar

        call @pop_A            ; Pop character from stack into C register for the syscall
        ld C A
        ldi I ~SYS_PRINT_CHAR
        int $INT_VECTORS       ; Interrupt to trigger the syscall
        ret
@PRTstring

        call @pop_A              ; Pop pointer from stack into A register for the syscall
        ldi I ~SYS_PRINT_STRING
        int $INT_VECTORS         ; Interrupt to trigger the syscall
        ret
@PRTcls

        ldi I ~SYS_CLEAR_SCREEN
        int $INT_VECTORS
        ret
@CURSORon

        ldi I ~SYS_PRINT_CURSOR
        int $INT_VECTORS
        ret
@CURSORoff

        ldi I ~SYS_DEL_CURSOR
        int $INT_VECTORS
        ret
@KEYchar
:key_loop

            ldi I ~SYS_GET_CHAR
            int $INT_VECTORS
            ldm I $p_syscall_status
    ldx A $_start_memory_
    call @push_A
    call @pop_A
    tst A 0
    jmpt :KEYchar_if_end_0
    ldm I $p_syscall_value
    ldx A $_start_memory_
    call @push_A
    jmp :key_end_loop
:KEYchar_if_end_0
    jmp :key_loop
:key_end_loop
    ret
@READline
:readline_loop
    call @KEYchar
    call @rt_dup
    ldi A 13
    call @push_A
    call @rt_eq
    call @pop_A
    tst A 0
    jmpt :READline_if_end_1
    call @PRTchar
    jmp :finish_readline
:READline_if_end_1
    call @rt_dup
    ldi A 8
    call @push_A
    call @rt_eq
    call @pop_A
    tst A 0
    jmpt :READline_if_end_2
    ldm A $input_buffer_index
    call @push_A
    ldi A 0
    call @push_A
    call @rt_neq
    call @pop_A
    tst A 0
    jmpt :READline_if_else_3
    call @PRTchar
    ldm A $input_buffer_index
    call @push_A
    ldi A 1
    call @push_A
    call @rt_sub
    call @pop_A
    sto A $input_buffer_index
    jmp :readline_loop
    jmp :READline_if_end_3
:READline_if_else_3
    call @rt_drop
    jmp :readline_loop
:READline_if_end_3
:READline_if_end_2
    call @rt_dup
    call @PRTchar
    ldi A $input_buffer
    call @push_A
    ldm A $input_buffer_index
    call @push_A
    call @rt_add
    call @pop_A
    sto A $p_input_buffer
    call @pop_B
    ldm I $p_input_buffer
    stx B $_start_memory_
    ldm A $input_buffer_index
    call @push_A
    ldi A 1
    call @push_A
    call @rt_add
    call @pop_A
    sto A $input_buffer_index
    jmp :readline_loop
:finish_readline
    ldi A $input_buffer
    call @push_A
    ldm A $input_buffer_index
    call @push_A
    call @rt_add
    call @pop_A
    sto A $p_input_buffer
    ldi A 0
    call @push_A
    call @pop_B
    ldm I $p_input_buffer
    stx B $_start_memory_
    ldi A 0
    call @push_A
    call @pop_A
    sto A $input_buffer_index
    ldi A $input_buffer
    call @push_A
    ret

# .DATA
% $p_syscall_status 0
% $p_syscall_value 0
% $p_input_buffer 0
% $input_buffer_index 0
