# .HEADER
MALLOC $p_syscall_status 0
MALLOC $p_syscall_value 0
# .FUNCTIONS
@io_lib_init
    call @pop_A
    sto A $p_syscall_value
    call @pop_A
    sto A $p_syscall_status
    ret
@PRTchar

        call @pop_A            ; Pop character from stack into C register for the syscall
        ld C A
        ldi I ~SYS_PRINT_CHAR
        int $INT_VECTORS       ; Interrupt to trigger the syscall
        ret
@PRTstring

        call @pop_A              ; Pop pointer from stack into A register for the syscall
        ldi I ~SYS_PRINT_STRING
        int $INT_VECTORS         ; Interrupt to trigger the syscall
        ret
@PRTcls

        ldi I ~SYS_CLEAR_SCREEN
        int $INT_VECTORS
        ret
@KEYchar
:key_loop

            ldi I ~SYS_GET_CHAR
            int $INT_VECTORS
            ldm I $p_syscall_status
    ldx A $_start_memory_
    call @push_A
    call @pop_A
    tst A 0
    jmpt :KEYchar_if_end_0
    ldm I $p_syscall_value
    ldx A $_start_memory_
    call @push_A
    jmp :key_end_loop
:KEYchar_if_end_0
    jmp :key_loop
:key_end_loop
    ret
@KEYpressed

        ldi I ~SYS_GET_CHAR
        int $INT_VECTORS
        ldm I $p_syscall_value
    ldx A $_start_memory_
    call @push_A
    ldm I $p_syscall_status
    ldx A $_start_memory_
    call @push_A
    ret
