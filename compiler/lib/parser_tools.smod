# .HEADER
. $_strtok_s 1
. $_strtok_d 1
. $_strtok_p 1
. $_strtok_c 1
MALLOC $bytecode_buffer 4096
. $bytecode_ptr 1
. $current_opcode 1
. $current_value 1
# .FUNCTIONS
@TOKENIZE
    call @pop_A
    sto A $_strtok_d
    call @pop_A
    sto A $_strtok_s
    ldm A $_strtok_s
    call @push_A
    call @pop_A
    sto A $_strtok_p
:strtok_loop
    ldm I $_strtok_p
    ldx A $_start_memory_
    call @push_A
    call @pop_A
    sto A $_strtok_c
    ldm A $_strtok_c
    call @push_A
    ldi A 0
    call @push_A
    call @rt_eq
    call @pop_A
    tst A 0
    jmpt :TOKENIZE_if_end_0
    ldm A $_strtok_s
    call @push_A
    ldi A 0
    call @push_A
    jmp :strtok_end
:TOKENIZE_if_end_0
    ldm A $_strtok_c
    call @push_A
    ldm A $_strtok_d
    call @push_A
    call @rt_eq
    call @pop_A
    tst A 0
    jmpt :TOKENIZE_if_end_1
    ldi A 0
    call @push_A
    call @pop_B
    ldm I $_strtok_p
    stx B $_start_memory_
    ldm A $_strtok_s
    call @push_A
    ldm A $_strtok_p
    call @push_A
    ldi A 1
    call @push_A
    call @rt_add
    jmp :strtok_end
:TOKENIZE_if_end_1
    ldm A $_strtok_p
    call @push_A
    ldi A 1
    call @push_A
    call @rt_add
    call @pop_A
    sto A $_strtok_p
    jmp :strtok_loop
:strtok_end
    ret
@WRITE_TO_BYTECODE
    call @pop_A
    sto A $current_opcode
    call @rt_dup
    ldm A $current_opcode
    call @push_A
    ldi A 1
    call @push_A
    call @rt_eq
    call @pop_A
    tst A 0
    jmpt :WRITE_TO_BYTECODE_if_end_2
    call @rt_drop
    call @pop_A
    sto A $current_value
    ldm A $current_opcode
    call @push_A
    call @pop_B
    ldm I $bytecode_ptr
    stx B $_start_memory_
    ldm A $bytecode_ptr
    call @push_A
    ldi A 1
    call @push_A
    call @rt_add
    call @pop_A
    sto A $bytecode_ptr
    ldm A $current_value
    call @push_A
    call @pop_B
    ldm I $bytecode_ptr
    stx B $_start_memory_
    ldm A $bytecode_ptr
    call @push_A
    ldi A 1
    call @push_A
    call @rt_add
    call @pop_A
    sto A $bytecode_ptr
    jmp :write_to_bytecode_end
:WRITE_TO_BYTECODE_if_end_2
    call @rt_dup
    ldm A $current_opcode
    call @push_A
    ldi A 4
    call @push_A
    call @rt_eq
    call @pop_A
    tst A 0
    jmpt :WRITE_TO_BYTECODE_if_end_3
    call @rt_drop
    call @pop_A
    sto A $current_value
    ldm A $current_opcode
    call @push_A
    call @pop_B
    ldm I $bytecode_ptr
    stx B $_start_memory_
    ldm A $bytecode_ptr
    call @push_A
    ldi A 1
    call @push_A
    call @rt_add
    call @pop_A
    sto A $bytecode_ptr
    ldm A $current_value
    call @push_A
    call @pop_B
    ldm I $bytecode_ptr
    stx B $_start_memory_
    ldm A $bytecode_ptr
    call @push_A
    ldi A 1
    call @push_A
    call @rt_add
    call @pop_A
    sto A $bytecode_ptr
    jmp :write_to_bytecode_end
:WRITE_TO_BYTECODE_if_end_3
    ldm A $current_opcode
    call @push_A
    call @pop_B
    ldm I $bytecode_ptr
    stx B $_start_memory_
    ldm A $bytecode_ptr
    call @push_A
    ldi A 1
    call @push_A
    call @rt_add
    call @pop_A
    sto A $bytecode_ptr
    jmp :write_to_bytecode_end
:write_to_bytecode_end
    ret

# .DATA
% $_strtok_s 0
% $_strtok_d 0
% $_strtok_p 0
% $_strtok_c 0
% $bytecode_ptr 4096
% $current_opcode 1
% $current_value 1
